#include<stdio.h>
#include<string.h>

// Makes each word backwards, based on a total of words where it considers a = first character of the string and b = last character of the strings. Note that you will always start with index 2, since index 0 is the name of the executable and index 1 is the list of flags.
void backwards(char **argv, int a, int b);

// Reverses the sentence argv, based on a total of words where it considers a = first character of the string and b = last character of the strings. Again, the list of words starts at index 2.
void reverse(char **argv, int a, int b);

// Sorts the string array argv, based on a total of words where it considers a = first character of the string and b = last character of the strings.  Again, the list of words starts at index 2 (which needs to be accounted for in your sorting algorithm).
void sort(char **argv, int a, int b);

// argc: number of command line arguments
// argv: array of strings (contains the command line arguments)
int main(int argc, char **argv)
{
	int i, j;
	for (i = 1; argv[1][i] != '\0'; i++)
	{
		switch(argv[1][i])
		{
			case 'b':
				backwards(argv, 2, argc);
				break;
			case 'r':
				reverse(argv, 2, argc);
				break;
			case 's':
				sort(argv, 2, argc);
				break;
		}
	}
	for (j = 2; j < argc; j++)
	{
		printf("%s ", argv[j]);

	}
	return 0;
}
void reverse(char **argv, int a, int b)
{
	int i;
	b--;
	while( a < b )
	{
		char *temp = argv[a];
		argv[a] = argv [b];
		argv[b] = temp;
		a++;
		b--;
	}

}
void sort(char **argv, int a, int b)
{
	int i, j;
	for (i = a; i < b - 1; i++)
	{
		for (j = a; j < b - 1; j++)
		{
			if( strcmp(argv[j], argv[j+1]) > 0 )
			{
				char *temp = argv[i];
				argv[j] = argv[j+1];
				argv[j+1] = temp;


			}	
		}
	}
}
void backwards(char ** argv, int a, int b)
{
	int i, j;
    for (i = a; i < b; i++)
    {
    	for(j=0; j < strlen(argv[i])/2; j++)
    	{
    		char temp = argv[i][j];
    		argv[i][j] = argv[i][strlen(argv[i]) - 1 -j];
    		argv[i][strlen(argv[i]) - 1 -j] = temp;
    	}
    }
}
